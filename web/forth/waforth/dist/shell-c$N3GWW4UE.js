( () => {
    var T = Math.pow;
    var S = (o, A, t) => {
        if (!A.has(o))
            throw TypeError("Cannot " + t)
    }
    ;
    var E = (o, A, t) => (S(o, A, "read from private field"),
    t ? t.call(o) : A.get(o))
      , R = (o, A, t) => {
        if (A.has(o))
            throw TypeError("Cannot add the same private member more than once");
        A instanceof WeakSet ? A.add(o) : A.set(o, t)
    }
      , u = (o, A, t, s) => (S(o, A, "write to private field"),
    s ? s.call(o, t) : A.set(o, t),
    t);
    var p = (o, A, t) => new Promise( (s, e) => {
        var i = k => {
            try {
                r(t.next(k))
            } catch (d) {
                e(d)
            }
        }
          , n = k => {
            try {
                r(t.throw(k))
            } catch (d) {
                e(d)
            }
        }
          , r = k => k.done ? s(k.value) : Promise.resolve(k.value).then(i, n);
        r((t = t.apply(o, A)).next())
    }
    );
    var $ = ( () => {
        for (var o = new Uint8Array(128), A = 0; A < 64; A++)
            o[A < 26 ? A + 65 : A < 52 ? A + 71 : A < 62 ? A - 4 : A * 4 - 205] = A;
        return t => {
            for (var s = t.length, e = new Uint8Array((s - (t[s - 1] == "=") - (t[s - 2] == "=")) * 3 / 4 | 0), i = 0, n = 0; i < s; ) {
                var r = o[t.charCodeAt(i++)]
                  , k = o[t.charCodeAt(i++)]
                  , d = o[t.charCodeAt(i++)]
                  , j = o[t.charCodeAt(i++)];
                e[n++] = r << 2 | k >> 4,
                e[n++] = k << 4 | d >> 2,
                e[n++] = d << 6 | j
            }
            return e
        }
    }
    )();
    var I = $("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aygCADYCACAAQQhqCyQAIAAgAEEQaygCADYCACAAQQRqIABBDGsoAgA2AgAgAEEIagsoAQF/IAAjAUEIayIBKAIANgIAIABBBGogAUEEaigCADYCACAAQQhqCywBAX8gACMBQQhrIgEoAgA2AgAgAEEEaiABQQRqKAIANgIAIAEkASAAQQhqC04BAn8gAEEQaygCACEBIABBDGsoAgAhAiAAQRBrIABBCGsoAgA2AgAgAEEMayAAQQRrKAIANgIAIABBCGsgATYCACAAQQRrIAI2AgAgAAsMACAAEL4BQQAQ3QELIAAgABD/ARDAASMFQQRqIwVBBGooAgBBX3E2AgAQuQELLQECfyAAQQhrIgIoAgAgAEEEayIBKAIASARAIAJBfzYCAAUgAkEANgIACyABCwwAIwZBgARqJAggAAstAQJ/IABBCGsiAigCACAAQQRrIgEoAgBGBEAgAkF/NgIABSACQQA2AgALIAELLQECfyAAQQhrIgIoAgAgAEEEayIBKAIASgRAIAJBfzYCAAUgAkEANgIACyABCxsBAX8gAEEEayIBIAEoAgAQgwJBBGo2AgAgAAtGAwN/AX4CfyAAQRBrIgMpAwAgAEEIayICKAIAIABBBGsiASgCABCJAiEGIQUhBCABIAY2AgAgAiAFNgIAIAMgBDcDACAACxoAIABBBGsiACMBIAAoAgA2AgAjAUEEaiQBCyMBAX8gAEEEayIBKAIABH8gACABKAIANgIAIABBBGoFIAALCxgBAX8gAEEEayIBIAEoAgAoAgA2AgAgAAsMAEEDJAlBgIAEEAkLHQAgABDEARCaAUEAQbABENMBQQBBxgAQ0wEQxQELIgEDfyAAQQRrIgEgASgCACICIAJBH3UiA3MgA2s2AgAgAAtVAQZ/IABBCGsiAigCACIDIABBBGsiASgCAGohBSADIQQCQANAEAIiBkEKRg0BIAQgBjoAACAEQQFqIQQgBhAAIAQgBUkNAAsLIAIgBCADazYCACABCzYBAn8QhQIQjAIaEIMCQQRqIQFBoJMIKAIARQR/IAAgASgCABD2AQUgARDWARDpARDDASAACwsLACMGEI0CJAYgAAsYAQF/IABBBGsiASABKAIAEI0CNgIAIAALEgEBfyAAEPcBIQEjBiABaiQGCyABAn8gAEEIayICIABBBGsiASgCACACKAIA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Uz5jBERST1BkA0RVUGUERUxTRWYERU1JVGcMRU5WSVJPTk1FTlQ/aAVFUkFTRWkIRVZBTFVBVEVqB0VYRUNVVEVrBEVYSVRsBUZBTFNFbQRGSUxMbgRGSU5EbwZGTS9NT0RwBEhFUkVxA0hFWHIESE9MRHMFSE9MRFN0AUl1AklGdglJTU1FRElBVEV3BklOVkVSVHgCSVN5AUp6A0tFWXsGTEFURVNUfAVMRUFWRX0HTElURVJBTH4ETE9PUH8GTFNISUZUgAECTSqBAQZNQVJLRVKCAQNNQViDAQNNSU6EAQNNT0SFAQRNT1ZFhgEGTkVHQVRFhwEDTklQiAECT1KJAQRPVkVSigEDUEFEiwEFUEFSU0WMAQpQQVJTRS1OQU1FjQEEUElDS44BCFBPU1RQT05FjwEEUVVJVJABAlI+kQECUkCSAQZSQU5ET02TAQdSRUNVUlNFlAEGUkVGSUxMlQEGUkVQRUFUlgENUkVTVE9SRS1JTlBVVJcBBFJPTEyYAQNST1SZAQZSU0hJRlSaAQJTcZsBA1NlcZwBA1M+RJ0BClNBVkUtSU5QVVSeAQVTQ0FMTJ8BBFNJR06gAQZTTS9SRU2hAQZTT1VSQ0WiAQlTT1VSQ0UtSUSjAQVTUEFDRaQBBlNQQUNFU6UBBFNXQVCmAQRUSEVOpwECVE+oAQRUUlVFqQEEVFVDS6oBBFRZUEWrAQJVLqwBAlU8rQECVT6uAQNVTSqvAQZVTS9NT0SwAQZVTkxPT1CxAQVVTlRJTLIBBlVOVVNFRLMBCFZBUklBQkxFtAEFV0hJTEW1AQZXSVRISU62AQRXT1JEtwEFV09SRFO4AQNYT1K5AQxsZWZ0LWJyYWNrZXS6AQxicmFja2V0LXRpY2u7AQxicmFja2V0LWNoYXK8AQFcvQENcmlnaHQtYnJhY2tldL4BCXN0YXJ0Q29kZb8BCnN0YXJ0Q29sb27AAQhlbmRDb2xvbsEBEGNvbXBpbGVQdXNoQ29uc3TCARBjb21waWxlUHVzaExvY2FswwELY29tcGlsZVB1c2jEAQljb21waWxlSWbFAQtjb21waWxlVGhlbsYBCWNvbXBpbGVEb8cBC2NvbXBpbGVMb29wyAEPY29tcGlsZVBsdXNMb29wyQEOY29tcGlsZUxvb3BFbmTKAQxjb21waWxlTGVhdmXLAQxjb21waWxlQmVnaW7MAQxjb21waWxlV2hpbGXNAQ1jb21waWxlUmVwZWF0zgEMY29tcGlsZVVudGlszwEPY29tcGlsZUVuZERlc3Rz0AEOY29tcGlsZVJlY3Vyc2XRAQpjb21waWxlUG9w0gEOY29tcGlsZUV4ZWN1dGXTAQtjb21waWxlQ2FsbNQBCWVtaXRCbG9ja9UBCGVtaXRMb29w1gEJZW1pdENvbnN01wEGZW1pdElm2AEIZW1pdEVsc2XZAQdlbWl0RW5k2gEGZW1pdEJy2wEIZW1pdEJySWbcAQxlbWl0U2V0TG9jYWzdAQxlbWl0R2V0TG9jYWzeAQxlbWl0VGVlTG9jYWzfAQdlbWl0QWRk4AEHZW1pdFN1YuEBB2VtaXRYT1LiAQ5lbWl0RXF1YWxzWmVyb+MBCWVtaXRFcXVhbOQBDGVtaXROb3RFcXVhbOUBFmVtaXRHcmVhdGVyRXF1YWxTaWduZWTmARBlbWl0TGVzc2VyU2lnbmVk5wEKZW1pdFJldHVybugBCWVtaXRTdG9yZekBCGVtaXRMb2Fk6gEFZW1pdDDrAQZlbWl0MXbsAQVlbWl0Me0BBWVtaXQy7gEHc3RhcnREb+8BBWVuZERv8AEIdXBkYXRlRG/xAQ9wdXNoRGF0YUFkZHJlc3PyAQ1zZXRMYXRlc3RCb2R58wEMcHVzaEluZGlyZWN09AELcmVzZXRNYXJrZXL1AQxleGVjdXRlRGVmZXL2AQRwdXNo9wEDcG9w+AELc3RyaW5nRXF1YWz5AQRmYWls+gERZmFpbFVuZGVmaW5lZFdvcmT7AQZjcmVhdGX8AQR0eXBl/QEFY3R5cGX+AQJ0b/8BD2Vuc3VyZUNvbXBpbGluZ4ACCWxlYjEyOC00cIECBmxlYjEyOIICB2xlYjEyOHWDAgRib2R5hAIMbnVtYmVyVG9DaGFyhQIJcGFyc2VOYW1lhgIFcGFyc2WHAgRza2lwiAIKcmVhZE51bWJlcokCBm51bWJlcooCB2hleGNoYXKLAgRmaW5kjAIFZmluZCGNAgdhbGlnbmVkjgIDVS5fAtUclAIAAAEAAgADAAQABQAGAgAGc2lsZW50AQN0b3MHBwADdG9zAQpmaW5kUmVzdWx0AglmaW5kVG9rZW4DBWVycm9yBAZudW1iZXIFCHdvcmRBZGRyBgd3b3JkTGVuCAMAA3RvcwECeHQCBGJvZHkJAQADdG9zCgEAA3RvcwsBAAN0b3MMAgADdG9zAQViYnRvcw0BAAN0b3MOAQADdG9zDwYAA3RvcwEBdgIEYmFzZQMFYmJ0b3MEAW0FA25wbxABAAN0b3MRBgADdG9zAQF2AgRiYXNlAwViYnRvcwQBbQUCcG8SAQADdG9zEwEAA3RvcxQDAAN0b3MBBGJ0b3MCBWJidG9zFQMAA3RvcwEFYmJ0b3MCBmJiYnRvcxYGAAN0b3MBBGJ0b3MCBWJidG9zAwZiYmJ0b3MEAngxBQJ4MhcDAAN0b3MBBGJ0b3MCBWJidG9zGAMAA3RvcwEEYWRkcgIFYmJ0b3MZAQADdG9zGgEAA3RvcxsDAAN0b3MBBGJ0b3MCBWJidG9zHAIAA3RvcwEBdh0BAAN0b3MeAgADdG9zAQFwHwQAA3RvcwEEYnRvcwIFYmJ0b3MDB2Rpdmlzb3IgBQADdG9zAQRidG9zAgViYnRvcwMCbjEEAm4yIQMAA3RvcwEEYnRvcwIFYmJ0b3MiAgADdG9zAQRidG9zIwIAA3RvcwEEYnRvcyQCAAN0b3MBBGJ0b3MlAgADdG9zAQRidG9zJgIAA3RvcwEEYnRvcycCAAN0b3MBBGJ0b3MoAgADdG9zAQRidG9zKQIAA3RvcwEEYnRvcyoBAAN0b3MrAgADdG9zAQRidG9zLAIAA3RvcwEEYnRvcy0BAAN0b3MuAQADdG9zLwEAA3RvczABAAN0b3MxAQADdG9zMgIAA3RvcwEGYmJ0b3JzMwIAA3RvcwEGYmJ0b3JzNAMAA3RvcwECeDECAngyNQEAA3RvczYBAAN0b3M3AwADdG9zAQRidG9zAgViYnRvczgBAAN0b3M5AwADdG9zAQRidG9zAgViYnRvczoDAAN0b3MBBGJ0b3MCBWJidG9zOwIAA3RvcwEEYnRvczwHAAN0b3MBBGJ0b3MCBWJidG9zAwdiYmJidG9zBAV2YWx1ZQUEcmVzdAYJcmVzdGNvdW50PQEAA3Rvcz4CAAN0b3MBBGJ0b3M/AgADdG9zAQRidG9zQAEAA3Rvc0EBAAN0b3NCBAADdG9zAQRidG9zAgF2AwF5QwcAA3RvcwEEYnRvcwIFYmJ0b3MDBGFkZHIEAXAFBGVuZHAGAWNEAwADdG9zAQN4dHACBGJ0b3NFAQADdG9zRgIAA3RvcwEEYnRvc0cCAAN0b3MBAXZIAwADdG9zAQRidG9zAgViYnRvc0kBAAN0b3NKAQADdG9zSwEAA3Rvc0wBAAN0b3NNAgADdG9zAQViYnRvc04BAAN0b3NPBAADdG9zAQFjAgRhZGRyAwNsZW5QAgADdG9zAQRidG9zUQIAA3RvcwEEYnRvc1ICAAN0b3MBBGJ0b3NTAwADdG9zAQRhZGRyAgNsZW5UAQADdG9zVQEAA3Rvc1YBAAN0b3NXAQADdG9zWAIAA3RvcwEBdlkDAAN0b3MBBGJ0b3MCBGFkZHJaAQADdG9zWwMAA3RvcwEIbmFtZUFkZHICB25hbWVMZW5cAQADdG9zXQMAA3RvcwEIbmFtZUFkZHICB25hbWVMZW5eAgADdG9zAQViYnRvc18CAAN0b3MBBGJ0b3NgAQADdG9zYQEAA3Rvc2IBAAN0b3NjAQADdG9zZAEAA3Rvc2UBAAN0b3NmAQADdG9zZwUAA3RvcwEEYWRkcgIDbGVuAwRidG9zBAViYnRvc2gCAAN0b3MBBWJidG9zaQYAA3RvcwEFYmJ0b3MCDHByZXZTb3VyY2VJRAMGcHJldkluBBNwcmV2SW5wdXRCdWZmZXJCYXNlBRNwcmV2SW5wdXRCdWZmZXJTaXplagEAA3Rvc2sBAAN0b3NsAQADdG9zbQIAA3RvcwEGYmJidG9zbgQAA3RvcwEFY2FkZHICAnh0AwFybwgAA3RvcwEEYnRvcwIGYmJidG9zAwJuMQQCbjIFBW4yXzMyBgFxBwNtb2RwAQADdG9zcQEAA3Rvc3IDAAN0b3MBBGJ0b3MCA25wb3MDAAN0b3MBA2xlbgIDbnBvdAEAA3Rvc3UBAAN0b3N2AQADdG9zdwIAA3RvcwEEYnRvc3gBAAN0b3N5AQADdG9zegEAA3Rvc3sBAAN0b3N8AQADdG9zfQEAA3Rvc34BAAN0b3N/AwADdG9zAQRidG9zAgViYnRvc4ABAgADdG9zAQViYnRvc4EBBQADdG9zAQhuYW1lQWRkcgIHbmFtZUxlbgMHb2xkSGVyZQQJb2xkTGF0ZXN0ggEEAAN0b3MBBGJ0b3MCBWJidG9zAwF2gwEEAAN0b3MBBGJ0b3MCBWJidG9zAwF2hAEDAAN0b3MBBGJ0b3MCBWJidG9zhQECAAN0b3MBBmJiYnRvc4YBAgADdG9zAQRidG9zhwECAAN0b3MBBGJ0b3OIAQMAA3RvcwEEYnRvcwIFYmJ0b3OJAQEAA3Rvc4oBAQADdG9ziwEEAAN0b3MBBGFkZHICA2xlbgMEYnRvc4wBAwADdG9zAQRhZGRyAgNsZW6NAQIAA3RvcwEEYnRvc44BAwADdG9zAQlmaW5kVG9rZW4CCmZpbmRSZXN1bHSPAQEAA3Rvc5ABAQADdG9zkQEBAAN0b3OSAQEAA3Rvc5MBAQADdG9zlAECAAN0b3MBBGNoYXKVAQEAA3Rvc5YBAgADdG9zAQViYnRvc5cBBQADdG9zAQF1AgF4AwFwBARidG9zmAEFAAN0b3MBA3RtcAIEYnRvcwMFYmJ0b3MEBmJiYnRvc5kBAwADdG9zAQRidG9zAgViYnRvc5oBBAADdG9zAQFjAgRhZGRyAwNsZW6bAQgAA3RvcwEEYWRkcgIBcAMCdHAEA2VuZAUBYwYCYzIHCWRlbGltaXRlZJwBAgADdG9zAQRidG9znQEBAAN0b3OeAQEAA3Rvc58BAwADdG9zAQRidG9zAgNucG+gAQUAA3RvcwEEYnRvcwIGYmJidG9zAwJuMQQCbjKhAQEAA3Rvc6IBAQADdG9zowEBAAN0b3OkAQIAA3RvcwEBaaUBBAADdG9zAQRidG9zAgViYnRvcwMDdG1wpgEBAAN0b3OnAQEAA3Rvc6gBAQADdG9zqQECAAN0b3MBAXaqAQMAA3RvcwEBcAIDbGVuqwEBAAN0b3OsAQMAA3RvcwEEYnRvcwIFYmJ0b3OtAQMAA3RvcwEEYnRvcwIFYmJ0b3OuAQIAA3RvcwEFYmJ0b3OvAQUAA3RvcwEEYnRvcwIGYmJidG9zAwJuMQQCbjKwAQEAA3Rvc7EBAQADdG9zsgEBAAN0b3OzAQEAA3Rvc7QBAQADdG9ztQEEAAN0b3MBBWJidG9zAgZiYmJ0b3MDA21pbrYBBQADdG9zAQh3b3JkQmFzZQIEYWRkcgMDbGVuBAlkZWxpbWl0ZXK3AQYAA3RvcwEGZW50cnlQAgdlbnRyeUxGAwZlbnRyeUwEAXAFAnBluAEDAAN0b3MBBGJ0b3MCBWJidG9zuQEBAAN0b3O6AQEAA3Rvc7sBAQADdG9zvAEBAAN0b3O9AQEAA3Rvc74BAwADdG9zAQhuYW1lQWRkcgIHbmFtZUxlbr8BAQAEdHlwZcABAgAIYm9keVNpemUBCm5hbWVMZW5ndGjBAQEAAW7CAQEAAW7DAQDEAQDFAQEAA3Rvc8YBAgADdG9zAQRjb25kxwEBAAN0b3PIAQEAA3Rvc8kBAgADdG9zAQRidG9zygEAywEBAAN0b3PMAQDNAQEAA3Rvc84BAQADdG9zzwECAAN0b3MBBGJ0b3PQAQDRAQDSAQMAA3RvcwECeHQCBGJvZHnTAQIABHR5cGUBAW7UAQDVAQDWAQEAAW7XAQDYAQDZAQDaAQEAAW7bAQEAAW7cAQEAAW7dAQEAAW7eAQEAAW7fAQDgAQDhAQDiAQDjAQDkAQDlAQDmAQDnAQDoAQDpAQDqAQEAAm9w6wECAAJvcAECaTHsAQIAAm9wAQJpMe0BAwACb3ABAmkxAgJpMu4BAgADdG9zAQFp7wEBAAN0b3PwAQIAA3RvcwEBafEBAgADdG9zAQFk8gECAAN0b3MBAXbzAQIAA3RvcwEBdvQBAgADdG9zAQJkcPUBAgADdG9zAQJkcPYBAgADdG9zAQF29wEBAAN0b3P4AQYABWFkZHIxAQRsZW4xAgVhZGRyMgMEbGVuMgQEZW5kMQUEZW5kMvkBAQADc3Ry+gECAARhZGRyAQNsZW77AQUACG5hbWVBZGRyAQduYW1lTGVuAgVmbGFncwMEZnVuYwQEaGVyZfwBAwABcAEDbGVuAgNlbmT9AQEAAXD+AQMAA3RvcwECZHACBGJ0b3P/AQEAA3Rvc4ACAQABboECBAABcAEFdmFsdWUCBG1vcmUDBGJ5dGWCAgMAAXABBXZhbHVlAgRieXRlgwIBAAJ4dIQCAQABdoUCAIYCBgAFZGVsaW0BBGFkZHICAXADA2VuZAQBYwUJZGVsaW1pdGVkhwIFAAVkZWxpbQEEYWRkcgIBcAMDZW5kBAFjiAIEAARhZGRyAQNsZW4CCXJlc3Rjb3VudAMFdmFsdWWJAgkABXZhbHVlAQRhZGRyAgZsZW5ndGgDAXAEBHNpZ24FBGNoYXIGBGJhc2UHA2VuZAgBbooCAQABY4sCBAAEYWRkcgEDbGVuAgZlbnRyeVADB2VudHJ5TEaMAgMABGFkZHIBA2xlbgIBco0CAQAEYWRkco4CAwABdgEEYmFzZQIBbY8CAQABdpACAQAGcmVzdWx0kQIAkgIAkwIABBECAAR3b3JkAQhkYXRhV29yZAe1ARAAA3RvcwEEdG9ycwIPaW5wdXRCdWZmZXJCYXNlAw9pbnB1dEJ1ZmZlclNpemUECHNvdXJjZUlEBQZsYXRlc3QGBGhlcmUHDm5leHRUYWJsZUluZGV4CAJwbwkFZXJyb3IKDGN1cnJlbnRMb2NhbAsJbGFzdExvY2FsDBNmaXJzdFRlbXBvcmFyeUxvY2FsDQ1icmFuY2hOZXN0aW5nDhFsYXN0RW1pdFdhc0dldFRPUw8CY3A=");
    var w = typeof navigator != "undefined" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
      , C = 400;
    function D(o, A, t) {
        return new TextDecoder().decode(new Uint8Array(o.buffer,A,t))
    }
    function F(o, A, t) {
        let s = new TextEncoder().encode(o)
          , e = s.length
          , i = new Uint8Array(A.buffer,t,e);
        for (let n = 0; n < e; ++n)
            i[n] = s[n];
        return e
    }
    function N(o) {
        let A = 0
          , t = []
          , s = new TextDecoder;
        return e => {
            A > 0 ? (t.push(e),
            A -= 1,
            A == 0 && (o(s.decode(Uint8Array.from(t))),
            t = [])) : (e & 128) === 0 ? o(String.fromCharCode(e)) : (t = [e],
            (e & 224) === 192 ? A = 1 : (e & 240) == 224 ? A = 2 : (e & 248) == 240 ? A = 3 : (e & 252) === 248 ? A = 4 : (e & 254) == 252 && (A = 5))
        }
    }
    function B(o) {
        let A = []
          , t = () => {
            A.length > 0 && (o(new TextDecoder().decode(Uint8Array.from(A))),
            A = [])
        }
          , s = e => {
            A.push(e),
            e == 10 && t()
        }
        ;
        return s.flush = t,
        s
    }
    var c, m, y = class {
        constructor() {
            R(this, c, void 0);
            R(this, m, void 0);
            u(this, m, {}),
            this.onEmit = B(console.log);
            let A = [];
            this.key = () => {
                for (; A.length === 0; ) {
                    let t = window.prompt("Enter text");
                    t != null && (A.push(...t.split("")),
                    (t.length === 0 || t.length > 1) && A.push(`
`))
                }
                return A.shift().charCodeAt(0)
            }
        }
        load() {
            return p(this, null, function*() {
                u(this, c, "");
                let A = yield WebAssembly.instantiate(I, {
                    shell: {
                        emit: e => {
                            this.onEmit && this.onEmit(e)
                        }
                        ,
                        read: (e, i) => {
                            let n, r = E(this, c).indexOf(`
`);
                            return r === -1 ? (n = E(this, c),
                            u(this, c, "")) : (n = E(this, c).substring(0, r + 1),
                            u(this, c, E(this, c).substring(r + 1))),
                            F(n, this.core.exports.memory, e)
                        }
                        ,
                        key: () => this.key(),
                        random: () => Math.random() * T(2, 31) | 0,
                        load: (e, i) => {
                            let n = new Uint8Array(this.core.exports.memory.buffer,e,i);
                            if (w) {
                                let r = [];
                                for (let k = 0; k < i; ++k)
                                    r.push(n[k]);
                                n = new Uint8Array(r)
                            }
                            try {
                                let r = new WebAssembly.Module(n);
                                new WebAssembly.Instance(r,{
                                    env: {
                                        table: t,
                                        memory: s
                                    }
                                })
                            } catch (r) {
                                throw console.error(r),
                                r
                            }
                        }
                        ,
                        call: () => {
                            let e = this.pop()
                              , i = this.pop()
                              , n = D(s, i, e)
                              , r = E(this, m)[n];
                            r ? r(this) : console.error("Unbound SCALL: %s", n)
                        }
                    }
                });
                this.core = A.instance;
                let t = this.core.exports.table
                  , s = this.core.exports.memory;
                return this
            })
        }
        memory() {
            return this.core.exports.memory
        }
        here() {
            return this.core.exports.here()
        }
        pop() {
            return this.core.exports.pop()
        }
        popString() {
            let A = this.pop()
              , t = this.pop();
            return D(this.memory(), t, A)
        }
        push(A) {
            this.core.exports.push(A)
        }
        pushString(A, t=0) {
            let s = this.here() + C
              , e = F(A, this.memory(), s);
            return this.push(s),
            this.push(e),
            s + C
        }
        read(A) {
            u(this, c, E(this, c) + A)
        }
        interpret(A, t=!1) {
            A.endsWith(`
`) || (A = A + `
`),
            this.read(A);
            try {
                return this.core.exports.run(t)
            } catch (s) {
                this.core.exports.error() === 1 && console.error(s)
            }
            return this.core.exports.error()
        }
        bind(A, t) {
            E(this, m)[A] = t
        }
        bindAsync(A, t) {
            E(this, m)[A] = () => p(this, null, function*() {
                let s = this.pop();
                try {
                    yield t(this),
                    this.push(-1)
                } catch (e) {
                    console.error(e),
                    this.push(0)
                } finally {
                    this.push(s),
                    this.interpret("EXECUTE")
                }
            })
        }
    }
    ;
    c = new WeakMap,
    m = new WeakMap;
    var U = y;
    var g = "0.20.1";
    function x(o) {
        let A = new U
          , t = document.createElement("pre");
        t.className = "Console",
        o.appendChild(t);
        let s, e;
        t.addEventListener("click", () => {
            s.style.visibility = "visible",
            s.focus(),
            s.style.visibility = "hidden"
        }
        );
        let i, n = !1, r = [];
        function k() {
            r.length != 0 && (i.appendChild(document.createTextNode(r.join(""))),
            r = [],
            o.querySelector(".cursor").scrollIntoView(!1))
        }
        function d(l, b, a=!1) {
            i != null && n !== b && k(),
            (i == null || n !== b) && (i = document.createElement("span"),
            i.className = b ? "in" : "out",
            n = b,
            t.insertBefore(i, e)),
            r.push(l),
            (a || b || l.endsWith(`
`)) && k()
        }
        function j(l) {
            if (n !== l || i.lastChild == null) {
                console.log("not erasing character");
                return
            }
            i.lastChild.remove()
        }
        function M() {
            let l = [];
            function b(a) {
                let f = a.split(`
`)
                  , h = [];
                f.length > 0 && h.push(f.pop());
                for (let O of f)
                    d(O, !0),
                    d(" ", !0),
                    A.interpret(l.join("") + O),
                    l = [];
                h.length > 0 && (d(h.join(""), !0),
                k()),
                l = h
            }
            o.addEventListener("keydown", a => {
                if (a.key === "Enter")
                    d(" ", !0),
                    A.interpret(l.join("")),
                    l = [];
                else if (a.key === "Backspace")
                    l.length > 0 && (l = l.slice(0, l.length - 1),
                    j(!0));
                else if (a.key.length === 1 && !a.metaKey && !a.ctrlKey)
                    d(a.key, !0),
                    l.push(a.key);
                else if (a.key === "o" && (a.metaKey || a.ctrlKey)) {
                    if (!window.showOpenFilePicker) {
                        window.alert("File loading not supported on this browser");
                        return
                    }
                    p(this, null, function*() {
                        let[f] = yield window.showOpenFilePicker({
                            types: [{
                                description: "Forth source files",
                                accept: {
                                    "text/plain": [".fs", ".f", ".fth", ".f4th", ".fr"]
                                }
                            }],
                            excludeAcceptAllOption: !0,
                            multiple: !1
                        });
                        b(yield(yield f.getFile()).text())
                    })
                } else
                    console.log("ignoring key %s", a.key);
                a.key === " " && a.preventDefault()
            }
            ),
            o.addEventListener("paste", a => {
                b((a.clipboardData || window.clipboardData).getData("text"))
            }
            )
        }
        function L() {
            t.innerHTML = `<span class='header'><a target='_blank' href='https://github.com/remko/waforth'>WAForth${g != null ? ` (${g})` : ""}</a>
</span><span class="cursor"> </span><input type="text">`,
            s = o.querySelector("input"),
            e = o.querySelector(".cursor")
        }
        A.onEmit = N(l => {
            d(l, !1)
        }
        ),
        L(),
        p(this, null, function*() {
            d("Loading core ... ", !1, !0);
            try {
                yield A.load(),
                L(),
                M();
                let l = {};
                for (let b of window.location.search.substring(window.location.search.indexOf("?") + 1).replace(/\+/, " ").split("&")) {
                    let a = b.indexOf("=");
                    a > 0 && (l[decodeURIComponent(b.substring(0, a))] = decodeURIComponent(b.substring(a + 1)))
                }
                if (l.p != null)
                    for (let b of l.p.split(`
`))
                        d(b, !0),
                        d(" ", !0),
                        A.interpret(b)
            } catch (l) {
                console.error(l);
                let b = document.createElement("span");
                b.className = "error",
                b.innerText = "error",
                e.remove(),
                s.remove(),
                t.appendChild(b)
            }
        })
    }
    x(document.body);
}
)();
//# sourceMappingURL=/waforth/dist/shell-c$N3GWW4UE.js.map
